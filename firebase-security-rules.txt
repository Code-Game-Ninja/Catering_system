rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // USERS
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read, write: if isAdmin();
    }

    // RESTAURANTS
    match /restaurants/{restaurantId} {
      allow read: if resource.data.isActive == true || isAdmin() || isOwner(resource.data.ownerId);
      allow create: if request.auth != null && !exists(/databases/$(database)/documents/restaurants/$(restaurantId));
      allow update, delete: if isAdmin() || isOwner(resource.data.ownerId);
    }

    // PRODUCTS
    match /products/{productId} {
      allow read: if true;
      allow create: if isAdmin() || isOwner(request.resource.data.ownerId);
      allow update, delete: if isAdmin() || isOwner(resource.data.ownerId);
    }

    // ORDERS
    match /orders/{orderId} {
      allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
      allow read: if request.auth != null &&
        resource.data.restaurantId != null &&
        exists(/databases/$(database)/documents/restaurants/$(resource.data.restaurantId)) &&
        get(/databases/$(database)/documents/restaurants/$(resource.data.restaurantId)).data.ownerId == request.auth.uid;
      allow read, write: if isAdmin();
    }

    // REVIEWS
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth != null && (
        (request.resource.data.productId is string && request.resource.data.productId.size() > 0) ||
        (request.resource.data.restaurantId is string && request.resource.data.restaurantId.size() > 0)
      ) && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      allow read, write: if isAdmin();
    }

    // CATEGORIES
    match /categories/{categoryId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // PLATFORM FEES
    match /platformFees/{feeId} {
      allow create: if isAdmin() ||
        (request.auth != null &&
          request.resource.data.restaurantId != null &&
          exists(/databases/$(database)/documents/restaurants/$(request.resource.data.restaurantId)) &&
          get(/databases/$(database)/documents/restaurants/$(request.resource.data.restaurantId)).data.ownerId == request.auth.uid
        );
      allow read, write: if isAdmin() ||
        (request.auth != null &&
          resource.data.restaurantId != null &&
          exists(/databases/$(database)/documents/restaurants/$(resource.data.restaurantId)) &&
          get(/databases/$(database)/documents/restaurants/$(resource.data.restaurantId)).data.ownerId == request.auth.uid
        );
    }

    // ANALYTICS
    match /analytics/{docId} {
      allow read, write: if isAdmin();
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        resource.data.restaurantOwnerId == request.auth.uid ||
        isAdmin()
      );
      allow create: if request.auth != null;
    }

    // Helper functions
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    function isRestaurantOwnerOfOrder() {
      return request.auth != null &&
        exists(/databases/$(database)/documents/restaurants/$(resource.data.restaurantId)) &&
        get(/databases/$(database)/documents/restaurants/$(resource.data.restaurantId)).data.ownerId == request.auth.uid;
    }
    function isOwner(ownerId) {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.uid == ownerId;
    }
  }
}

// Indexes required for reviews:
// - reviews: composite index on (restaurantId ASC, createdAt DESC)
// - reviews: composite index on (productId ASC, createdAt DESC)
